/*
 * generated by Xtext 2.11.0
 */
package org.metaborg.paplj.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.metaborg.paplj.ide.contentassist.antlr.internal.InternalPapljParser;
import org.metaborg.paplj.services.PapljGrammarAccess;

public class PapljParser extends AbstractContentAssistParser {

	@Inject
	private PapljGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPapljParser createParser() {
		InternalPapljParser result = new InternalPapljParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getSymbolAccess().getAlternatives(), "rule__Symbol__Alternatives");
					put(grammarAccess.getIfLetExprAccess().getAlternatives(), "rule__IfLetExpr__Alternatives");
					put(grammarAccess.getComparativeExprAccess().getAlternatives_1_0(), "rule__ComparativeExpr__Alternatives_1_0");
					put(grammarAccess.getAdditiveExprAccess().getAlternatives_1_0(), "rule__AdditiveExpr__Alternatives_1_0");
					put(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_0(), "rule__MultiplicativeExpr__Alternatives_1_0");
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives_1_1(), "rule__PrimaryExpr__Alternatives_1_1");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_0(), "rule__Program__Group_0__0");
					put(grammarAccess.getProgramAccess().getGroup_3(), "rule__Program__Group_3__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
					put(grammarAccess.getBlock2Access().getGroup(), "rule__Block2__Group__0");
					put(grammarAccess.getBlock2Access().getGroup_2(), "rule__Block2__Group_2__0");
					put(grammarAccess.getBlock2Access().getGroup_2_1(), "rule__Block2__Group_2_1__0");
					put(grammarAccess.getAssignmentExprAccess().getGroup(), "rule__AssignmentExpr__Group__0");
					put(grammarAccess.getAssignmentExprAccess().getGroup_1(), "rule__AssignmentExpr__Group_1__0");
					put(grammarAccess.getAssignmentExprAccess().getGroup_1_0(), "rule__AssignmentExpr__Group_1_0__0");
					put(grammarAccess.getLogicalOrExprAccess().getGroup(), "rule__LogicalOrExpr__Group__0");
					put(grammarAccess.getLogicalOrExprAccess().getGroup_1(), "rule__LogicalOrExpr__Group_1__0");
					put(grammarAccess.getLogicalOrExprAccess().getGroup_1_0(), "rule__LogicalOrExpr__Group_1_0__0");
					put(grammarAccess.getLogicalAndExprAccess().getGroup(), "rule__LogicalAndExpr__Group__0");
					put(grammarAccess.getLogicalAndExprAccess().getGroup_1(), "rule__LogicalAndExpr__Group_1__0");
					put(grammarAccess.getLogicalAndExprAccess().getGroup_1_0(), "rule__LogicalAndExpr__Group_1_0__0");
					put(grammarAccess.getComparativeExprAccess().getGroup(), "rule__ComparativeExpr__Group__0");
					put(grammarAccess.getComparativeExprAccess().getGroup_1(), "rule__ComparativeExpr__Group_1__0");
					put(grammarAccess.getComparativeExprAccess().getGroup_1_0_0(), "rule__ComparativeExpr__Group_1_0_0__0");
					put(grammarAccess.getComparativeExprAccess().getGroup_1_0_1(), "rule__ComparativeExpr__Group_1_0_1__0");
					put(grammarAccess.getComparativeExprAccess().getGroup_1_0_2(), "rule__ComparativeExpr__Group_1_0_2__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup(), "rule__AdditiveExpr__Group__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup_1(), "rule__AdditiveExpr__Group_1__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup_1_0_0(), "rule__AdditiveExpr__Group_1_0_0__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup_1_0_1(), "rule__AdditiveExpr__Group_1_0_1__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup(), "rule__MultiplicativeExpr__Group__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup_1(), "rule__MultiplicativeExpr__Group_1__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup_1_0_0(), "rule__MultiplicativeExpr__Group_1_0_0__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup_1_0_1(), "rule__MultiplicativeExpr__Group_1_0_1__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_0(), "rule__UnaryExpr__Group_0__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_0_1(), "rule__UnaryExpr__Group_0_1__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_0_1_0(), "rule__UnaryExpr__Group_0_1_0__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_2(), "rule__UnaryExpr__Group_2__0");
					put(grammarAccess.getMemberExprAccess().getGroup(), "rule__MemberExpr__Group__0");
					put(grammarAccess.getMemberExprAccess().getGroup_1(), "rule__MemberExpr__Group_1__0");
					put(grammarAccess.getMemberExprAccess().getGroup_1_0(), "rule__MemberExpr__Group_1_0__0");
					put(grammarAccess.getMemberExprAccess().getGroup_1_0_3(), "rule__MemberExpr__Group_1_0_3__0");
					put(grammarAccess.getMemberExprAccess().getGroup_1_0_3_1(), "rule__MemberExpr__Group_1_0_3_1__0");
					put(grammarAccess.getMemberExprAccess().getGroup_1_0_3_1_1(), "rule__MemberExpr__Group_1_0_3_1_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_0(), "rule__PrimaryExpr__Group_0__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_1(), "rule__PrimaryExpr__Group_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_2(), "rule__PrimaryExpr__Group_2__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_3(), "rule__PrimaryExpr__Group_3__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_4(), "rule__PrimaryExpr__Group_4__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_5(), "rule__PrimaryExpr__Group_5__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_5_2(), "rule__PrimaryExpr__Group_5_2__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_5_2_1(), "rule__PrimaryExpr__Group_5_2_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_5_2_1_1(), "rule__PrimaryExpr__Group_5_2_1_1__0");
					put(grammarAccess.getPrimaryExprAccess().getGroup_7(), "rule__PrimaryExpr__Group_7__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getLetAccess().getGroup(), "rule__Let__Group__0");
					put(grammarAccess.getProgramAccess().getNameAssignment_0_1(), "rule__Program__NameAssignment_0_1");
					put(grammarAccess.getProgramAccess().getImportsAssignment_1(), "rule__Program__ImportsAssignment_1");
					put(grammarAccess.getProgramAccess().getClassesAssignment_2(), "rule__Program__ClassesAssignment_2");
					put(grammarAccess.getProgramAccess().getExprAssignment_3_1(), "rule__Program__ExprAssignment_3_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getSuperTypeAssignment_2_1(), "rule__Type__SuperTypeAssignment_2_1");
					put(grammarAccess.getTypeAccess().getMembersAssignment_4(), "rule__Type__MembersAssignment_4");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_0(), "rule__Method__TypeAssignment_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_0(), "rule__Method__ParamsAssignment_3_0");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_1_1(), "rule__Method__ParamsAssignment_3_1_1");
					put(grammarAccess.getMethodAccess().getBodyAssignment_5(), "rule__Method__BodyAssignment_5");
					put(grammarAccess.getParamAccess().getTypeAssignment_0(), "rule__Param__TypeAssignment_0");
					put(grammarAccess.getParamAccess().getNameAssignment_1(), "rule__Param__NameAssignment_1");
					put(grammarAccess.getBindingAccess().getTypeAssignment_0(), "rule__Binding__TypeAssignment_0");
					put(grammarAccess.getBindingAccess().getNameAssignment_1(), "rule__Binding__NameAssignment_1");
					put(grammarAccess.getBindingAccess().getValueAssignment_3(), "rule__Binding__ValueAssignment_3");
					put(grammarAccess.getBlock2Access().getExprsAssignment_2_0(), "rule__Block2__ExprsAssignment_2_0");
					put(grammarAccess.getBlock2Access().getExprsAssignment_2_1_1(), "rule__Block2__ExprsAssignment_2_1_1");
					put(grammarAccess.getAssignmentExprAccess().getValueAssignment_1_0_2(), "rule__AssignmentExpr__ValueAssignment_1_0_2");
					put(grammarAccess.getLogicalOrExprAccess().getRightAssignment_1_1(), "rule__LogicalOrExpr__RightAssignment_1_1");
					put(grammarAccess.getLogicalAndExprAccess().getRightAssignment_1_1(), "rule__LogicalAndExpr__RightAssignment_1_1");
					put(grammarAccess.getComparativeExprAccess().getRightAssignment_1_1(), "rule__ComparativeExpr__RightAssignment_1_1");
					put(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_1(), "rule__AdditiveExpr__RightAssignment_1_1");
					put(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_1(), "rule__MultiplicativeExpr__RightAssignment_1_1");
					put(grammarAccess.getUnaryExprAccess().getTypeAssignment_0_1_1(), "rule__UnaryExpr__TypeAssignment_0_1_1");
					put(grammarAccess.getUnaryExprAccess().getExprAssignment_1_2(), "rule__UnaryExpr__ExprAssignment_1_2");
					put(grammarAccess.getUnaryExprAccess().getExprAssignment_2_2(), "rule__UnaryExpr__ExprAssignment_2_2");
					put(grammarAccess.getMemberExprAccess().getMemberAssignment_1_0_2(), "rule__MemberExpr__MemberAssignment_1_0_2");
					put(grammarAccess.getMemberExprAccess().getMethodInvocationAssignment_1_0_3_0(), "rule__MemberExpr__MethodInvocationAssignment_1_0_3_0");
					put(grammarAccess.getMemberExprAccess().getArgsAssignment_1_0_3_1_0(), "rule__MemberExpr__ArgsAssignment_1_0_3_1_0");
					put(grammarAccess.getMemberExprAccess().getArgsAssignment_1_0_3_1_1_1(), "rule__MemberExpr__ArgsAssignment_1_0_3_1_1_1");
					put(grammarAccess.getPrimaryExprAccess().getValueAssignment_0_1(), "rule__PrimaryExpr__ValueAssignment_0_1");
					put(grammarAccess.getPrimaryExprAccess().getTrueAssignment_1_1_0(), "rule__PrimaryExpr__TrueAssignment_1_1_0");
					put(grammarAccess.getPrimaryExprAccess().getTypeAssignment_3_2(), "rule__PrimaryExpr__TypeAssignment_3_2");
					put(grammarAccess.getPrimaryExprAccess().getTypeAssignment_4_2(), "rule__PrimaryExpr__TypeAssignment_4_2");
					put(grammarAccess.getPrimaryExprAccess().getMemberAssignment_5_1(), "rule__PrimaryExpr__MemberAssignment_5_1");
					put(grammarAccess.getPrimaryExprAccess().getMethodInvocationAssignment_5_2_0(), "rule__PrimaryExpr__MethodInvocationAssignment_5_2_0");
					put(grammarAccess.getPrimaryExprAccess().getArgsAssignment_5_2_1_0(), "rule__PrimaryExpr__ArgsAssignment_5_2_1_0");
					put(grammarAccess.getPrimaryExprAccess().getArgsAssignment_5_2_1_1_1(), "rule__PrimaryExpr__ArgsAssignment_5_2_1_1_1");
					put(grammarAccess.getIfAccess().getConditionAssignment_2(), "rule__If__ConditionAssignment_2");
					put(grammarAccess.getIfAccess().getOnTrueAssignment_4(), "rule__If__OnTrueAssignment_4");
					put(grammarAccess.getIfAccess().getOnFalseAssignment_6(), "rule__If__OnFalseAssignment_6");
					put(grammarAccess.getLetAccess().getBindingsAssignment_1(), "rule__Let__BindingsAssignment_1");
					put(grammarAccess.getLetAccess().getExprAssignment_3(), "rule__Let__ExprAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PapljGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PapljGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
