/*
 * generated by Xtext 2.11.0
 */
package org.metaborg.paplj.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PapljGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesTypeParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRunKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////                                                Program and Classes                                                 //
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// The first rule is the start rule, and must be a non-terminal.
		//Program:
		//	('program' name=QualifiedName ';'?)?
		//	imports+=Import*
		//	classes+=Type* ('run'
		//	expr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('program' name=QualifiedName ';'?)? imports+=Import* classes+=Type* ('run' expr=Expr)?
		public Group getGroup() { return cGroup; }
		
		//('program' name=QualifiedName ';'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'program'
		public Keyword getProgramKeyword_0_0() { return cProgramKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//classes+=Type*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }
		
		//Type
		public RuleCall getClassesTypeParserRuleCall_2_0() { return cClassesTypeParserRuleCall_2_0; }
		
		//('run' expr=Expr)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'run'
		public Keyword getRunKeyword_3_0() { return cRunKeyword_3_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_1_0() { return cExprExprParserRuleCall_3_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeTypeQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Type:
		//	'class' name=ID ('extends' superType=[Type|QualifiedName])? '{'
		//	members+=Member*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' superType=[Type|QualifiedName])? '{' members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Type|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Type|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Type|QualifiedName]
		public CrossReference getSuperTypeTypeCrossReference_2_1_0() { return cSuperTypeTypeCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeTypeQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeTypeQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//members+=Member*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_4_0() { return cMembersMemberParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Field | Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Symbol:
		//	Param | Binding | Member;
		@Override public ParserRule getRule() { return rule; }
		
		//Param | Binding | Member
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Param
		public RuleCall getParamParserRuleCall_0() { return cParamParserRuleCall_0; }
		
		//Binding
		public RuleCall getBindingParserRuleCall_1() { return cBindingParserRuleCall_1; }
		
		//Member
		public RuleCall getMemberParserRuleCall_2() { return cMemberParserRuleCall_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=[Type|QualifiedName] name=ID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Type|QualifiedName] name=ID ';'?
		public Group getGroup() { return cGroup; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBlock2ParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//Method:
		//	type=[Type|QualifiedName] name=ID '(' (params+=Param (',' params+=Param)*)? ')'
		//	body=Block2;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Type|QualifiedName] name=ID '(' (params+=Param (',' params+=Param)*)? ')' body=Block2
		public Group getGroup() { return cGroup; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=Param (',' params+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=Param
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_0_0() { return cParamsParamParserRuleCall_3_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_1_0() { return cParamsParamParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=Block2
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Block2
		public RuleCall getBodyBlock2ParserRuleCall_5_0() { return cBodyBlock2ParserRuleCall_5_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Param:
		//	type=[Type|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Type|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExprParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Binding:
		//	type=[Type|QualifiedName] name=ID '=' value=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Type|QualifiedName] name=ID '=' value=Expr
		public Group getGroup() { return cGroup; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expr
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_3_0() { return cValueExprParserRuleCall_3_0; }
	}
	public class Block2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Block2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlock2Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block2:
		//	{Block2}
		//	'{' (exprs+=Expr (';' exprs+=Expr)*)? ';'?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block2} '{' (exprs+=Expr (';' exprs+=Expr)*)? ';'? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block2}
		public Action getBlock2Action_0() { return cBlock2Action_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(exprs+=Expr (';' exprs+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_2_0_0() { return cExprsExprParserRuleCall_2_0_0; }
		
		//(';' exprs+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_0() { return cSemicolonKeyword_2_1_0; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_2_1_1_0() { return cExprsExprParserRuleCall_2_1_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Expr");
		private final RuleCall cIfLetExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////                                                     Expressions                                                    //
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// From lowest to highest precedence.
		//Expr:
		//	IfLetExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//IfLetExpr
		public RuleCall getIfLetExprParserRuleCall() { return cIfLetExprParserRuleCall; }
	}
	public class IfLetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.IfLetExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IfLetExpr Expr:
		//	If | Let | AssignmentExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//If | Let | AssignmentExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//Let
		public RuleCall getLetParserRuleCall_1() { return cLetParserRuleCall_1; }
		
		//AssignmentExpr
		public RuleCall getAssignmentExprParserRuleCall_2() { return cAssignmentExprParserRuleCall_2; }
	}
	public class AssignmentExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.AssignmentExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAssignmentLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		
		//// Non-associative.
		//AssignmentExpr Expr:
		//	LogicalOrExpr => ({Assignment.left=current} '=' value=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpr => ({Assignment.left=current} '=' value=Expr)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpr
		public RuleCall getLogicalOrExprParserRuleCall_0() { return cLogicalOrExprParserRuleCall_0; }
		
		//=> ({Assignment.left=current} '=' value=Expr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assignment.left=current} '=' value=Expr
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0_0() { return cAssignmentLeftAction_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//value=Expr
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_1_0_2_0() { return cValueExprParserRuleCall_1_0_2_0; }
	}
	public class LogicalOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.LogicalOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightLogicalAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Left-associative.
		//LogicalOrExpr Expr:
		//	LogicalAndExpr (({Or.left=current} '||') right=LogicalAndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpr (({Or.left=current} '||') right=LogicalAndExpr)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpr
		public RuleCall getLogicalAndExprParserRuleCall_0() { return cLogicalAndExprParserRuleCall_0; }
		
		//(({Or.left=current} '||') right=LogicalAndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current} '||'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_0() { return cOrLeftAction_1_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }
		
		//right=LogicalAndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//LogicalAndExpr
		public RuleCall getRightLogicalAndExprParserRuleCall_1_1_0() { return cRightLogicalAndExprParserRuleCall_1_1_0; }
	}
	public class LogicalAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.LogicalAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparativeExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Left-associative.
		//LogicalAndExpr Expr:
		//	ComparativeExpr (({And.left=current} '&&') right=ComparativeExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparativeExpr (({And.left=current} '&&') right=ComparativeExpr)*
		public Group getGroup() { return cGroup; }
		
		//ComparativeExpr
		public RuleCall getComparativeExprParserRuleCall_0() { return cComparativeExprParserRuleCall_0; }
		
		//(({And.left=current} '&&') right=ComparativeExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current} '&&'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0() { return cAndLeftAction_1_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }
		
		//right=ComparativeExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ComparativeExpr
		public RuleCall getRightComparativeExprParserRuleCall_1_1_0() { return cRightComparativeExprParserRuleCall_1_1_0; }
	}
	public class ComparativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.ComparativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNeqLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cLtLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Non-associative.
		//ComparativeExpr Expr:
		//	AdditiveExpr (({Eq.left=current} '==' | {Neq.left=current} '!=' | {Lt.left=current} '<') right=AdditiveExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpr (({Eq.left=current} '==' | {Neq.left=current} '!=' | {Lt.left=current} '<') right=AdditiveExpr)?
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpr
		public RuleCall getAdditiveExprParserRuleCall_0() { return cAdditiveExprParserRuleCall_0; }
		
		//(({Eq.left=current} '==' | {Neq.left=current} '!=' | {Lt.left=current} '<') right=AdditiveExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Eq.left=current} '==' | {Neq.left=current} '!=' | {Lt.left=current} '<'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Eq.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Eq.left=current}
		public Action getEqLeftAction_1_0_0_0() { return cEqLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{Neq.left=current} '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Neq.left=current}
		public Action getNeqLeftAction_1_0_1_0() { return cNeqLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//{Lt.left=current} '<'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Lt.left=current}
		public Action getLtLeftAction_1_0_2_0() { return cLtLeftAction_1_0_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_2_1() { return cLessThanSignKeyword_1_0_2_1; }
		
		//right=AdditiveExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AdditiveExpr
		public RuleCall getRightAdditiveExprParserRuleCall_1_1_0() { return cRightAdditiveExprParserRuleCall_1_1_0; }
	}
	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAddLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSubLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Left-associative.
		//AdditiveExpr Expr:
		//	MultiplicativeExpr (({Add.left=current} '+' | {Sub.left=current} '-') right=MultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpr (({Add.left=current} '+' | {Sub.left=current} '-') right=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpr
		public RuleCall getMultiplicativeExprParserRuleCall_0() { return cMultiplicativeExprParserRuleCall_0; }
		
		//(({Add.left=current} '+' | {Sub.left=current} '-') right=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Add.left=current} '+' | {Sub.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Add.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Add.left=current}
		public Action getAddLeftAction_1_0_0_0() { return cAddLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Sub.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Sub.left=current}
		public Action getSubLeftAction_1_0_1_0() { return cSubLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultiplicativeExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicativeExpr
		public RuleCall getRightMultiplicativeExprParserRuleCall_1_1_0() { return cRightMultiplicativeExprParserRuleCall_1_1_0; }
	}
	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Left-associative.
		//MultiplicativeExpr Expr:
		//	UnaryExpr (({Mul.left=current} '*' | {Div.left=current} '/') right=UnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr (({Mul.left=current} '*' | {Div.left=current} '/') right=UnaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//(({Mul.left=current} '*' | {Div.left=current} '/') right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Mul.left=current} '*' | {Div.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMemberExprParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Action cCastLeftAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0_1_1_0 = (CrossReference)cTypeAssignment_0_1_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cTypeTypeCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprUnaryExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMinAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprUnaryExprParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		
		//// Non-associative.
		//UnaryExpr Expr:
		//	MemberExpr (({Cast.left=current} 'as') type=[Type])? | {Not} '!' expr=UnaryExpr | {Min} '-' expr=UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberExpr (({Cast.left=current} 'as') type=[Type])? | {Not} '!' expr=UnaryExpr | {Min} '-' expr=UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MemberExpr (({Cast.left=current} 'as') type=[Type])?
		public Group getGroup_0() { return cGroup_0; }
		
		//MemberExpr
		public RuleCall getMemberExprParserRuleCall_0_0() { return cMemberExprParserRuleCall_0_0; }
		
		//(({Cast.left=current} 'as') type=[Type])?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{Cast.left=current} 'as'
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//{Cast.left=current}
		public Action getCastLeftAction_0_1_0_0() { return cCastLeftAction_0_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1_0_1() { return cAsKeyword_0_1_0_1; }
		
		//type=[Type]
		public Assignment getTypeAssignment_0_1_1() { return cTypeAssignment_0_1_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_0_1_1_0() { return cTypeTypeCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_1_1_0_1() { return cTypeTypeIDTerminalRuleCall_0_1_1_0_1; }
		
		//{Not} '!' expr=UnaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expr=UnaryExpr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_1_2_0() { return cExprUnaryExprParserRuleCall_1_2_0; }
		
		//{Min} '-' expr=UnaryExpr
		public Group getGroup_2() { return cGroup_2; }
		
		//{Min}
		public Action getMinAction_2_0() { return cMinAction_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//expr=UnaryExpr
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }
		
		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_2_2_0() { return cExprUnaryExprParserRuleCall_2_2_0; }
	}
	public class MemberExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.MemberExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMemberRefLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cMemberAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cMemberMemberCrossReference_1_0_2_0 = (CrossReference)cMemberAssignment_1_0_2.eContents().get(0);
		private final RuleCall cMemberMemberIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cMemberMemberCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Assignment cMethodInvocationAssignment_1_0_3_0 = (Assignment)cGroup_1_0_3.eContents().get(0);
		private final Keyword cMethodInvocationLeftParenthesisKeyword_1_0_3_0_0 = (Keyword)cMethodInvocationAssignment_1_0_3_0.eContents().get(0);
		private final Group cGroup_1_0_3_1 = (Group)cGroup_1_0_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_0_3_1_0 = (Assignment)cGroup_1_0_3_1.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_1_0_3_1_0_0 = (RuleCall)cArgsAssignment_1_0_3_1_0.eContents().get(0);
		private final Group cGroup_1_0_3_1_1 = (Group)cGroup_1_0_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_3_1_1_0 = (Keyword)cGroup_1_0_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_3_1_1_1 = (Assignment)cGroup_1_0_3_1_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_1_0_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_0_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3_2 = (Keyword)cGroup_1_0_3.eContents().get(2);
		
		//// Left-associative.
		//MemberExpr Expr:
		//	PrimaryExpr => ({MemberRef.left=current} '.' member=[Member] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)?
		//	')')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr => ({MemberRef.left=current} '.' member=[Member] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)?
		//')')?)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//=> ({MemberRef.left=current} '.' member=[Member] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MemberRef.left=current} '.' member=[Member] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MemberRef.left=current}
		public Action getMemberRefLeftAction_1_0_0() { return cMemberRefLeftAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//member=[Member]
		public Assignment getMemberAssignment_1_0_2() { return cMemberAssignment_1_0_2; }
		
		//[Member]
		public CrossReference getMemberMemberCrossReference_1_0_2_0() { return cMemberMemberCrossReference_1_0_2_0; }
		
		//ID
		public RuleCall getMemberMemberIDTerminalRuleCall_1_0_2_0_1() { return cMemberMemberIDTerminalRuleCall_1_0_2_0_1; }
		
		//(methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//methodInvocation?='('
		public Assignment getMethodInvocationAssignment_1_0_3_0() { return cMethodInvocationAssignment_1_0_3_0; }
		
		//'('
		public Keyword getMethodInvocationLeftParenthesisKeyword_1_0_3_0_0() { return cMethodInvocationLeftParenthesisKeyword_1_0_3_0_0; }
		
		//(args+=Expr (',' args+=Expr)*)?
		public Group getGroup_1_0_3_1() { return cGroup_1_0_3_1; }
		
		//args+=Expr
		public Assignment getArgsAssignment_1_0_3_1_0() { return cArgsAssignment_1_0_3_1_0; }
		
		//Expr
		public RuleCall getArgsExprParserRuleCall_1_0_3_1_0_0() { return cArgsExprParserRuleCall_1_0_3_1_0_0; }
		
		//(',' args+=Expr)*
		public Group getGroup_1_0_3_1_1() { return cGroup_1_0_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_3_1_1_0() { return cCommaKeyword_1_0_3_1_1_0; }
		
		//args+=Expr
		public Assignment getArgsAssignment_1_0_3_1_1_1() { return cArgsAssignment_1_0_3_1_1_1; }
		
		//Expr
		public RuleCall getArgsExprParserRuleCall_1_0_3_1_1_1_0() { return cArgsExprParserRuleCall_1_0_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_3_2() { return cRightParenthesisKeyword_1_0_3_2; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cTrueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTrueTrueKeyword_1_1_0_0 = (Keyword)cTrueAssignment_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cThisAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cThisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNullAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNullKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_3_2_0 = (CrossReference)cTypeAssignment_3_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cTypeTypeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNewAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNewKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_4_2_0 = (CrossReference)cTypeAssignment_4_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_4_2_0_1 = (RuleCall)cTypeTypeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVarAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cMemberAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cMemberSymbolCrossReference_5_1_0 = (CrossReference)cMemberAssignment_5_1.eContents().get(0);
		private final RuleCall cMemberSymbolIDTerminalRuleCall_5_1_0_1 = (RuleCall)cMemberSymbolCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cMethodInvocationAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final Keyword cMethodInvocationLeftParenthesisKeyword_5_2_0_0 = (Keyword)cMethodInvocationAssignment_5_2_0.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cGroup_5_2.eContents().get(1);
		private final Assignment cArgsAssignment_5_2_1_0 = (Assignment)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_5_2_1_0_0 = (RuleCall)cArgsAssignment_5_2_1_0.eContents().get(0);
		private final Group cGroup_5_2_1_1 = (Group)cGroup_5_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_2_1_1_0 = (Keyword)cGroup_5_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_5_2_1_1_1 = (Assignment)cGroup_5_2_1_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_5_2_1_1_1_0 = (RuleCall)cArgsAssignment_5_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final RuleCall cBlock2ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cExprParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//PrimaryExpr Expr:
		//	{Num} value=INT | {Bool} (^true?='true' | 'false') | {This} 'this' | {Null} 'null' type=[Type]? | {New} 'new'
		//	type=[Type|QualifiedName] '(' ')' | {Var} member=[Symbol] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		//	| Block2 |
		//	'(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT | {Bool} (^true?='true' | 'false') | {This} 'this' | {Null} 'null' type=[Type]? | {New} 'new'
		//type=[Type|QualifiedName] '(' ')' | {Var} member=[Symbol] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		//| Block2 | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Num} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Num}
		public Action getNumAction_0_0() { return cNumAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{Bool} (^true?='true' | 'false')
		public Group getGroup_1() { return cGroup_1; }
		
		//{Bool}
		public Action getBoolAction_1_0() { return cBoolAction_1_0; }
		
		//^true?='true' | 'false'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//^true?='true'
		public Assignment getTrueAssignment_1_1_0() { return cTrueAssignment_1_1_0; }
		
		//'true'
		public Keyword getTrueTrueKeyword_1_1_0_0() { return cTrueTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
		
		//{This} 'this'
		public Group getGroup_2() { return cGroup_2; }
		
		//{This}
		public Action getThisAction_2_0() { return cThisAction_2_0; }
		
		//'this'
		public Keyword getThisKeyword_2_1() { return cThisKeyword_2_1; }
		
		//{Null} 'null' type=[Type]?
		public Group getGroup_3() { return cGroup_3; }
		
		//{Null}
		public Action getNullAction_3_0() { return cNullAction_3_0; }
		
		//'null'
		public Keyword getNullKeyword_3_1() { return cNullKeyword_3_1; }
		
		//type=[Type]?
		public Assignment getTypeAssignment_3_2() { return cTypeAssignment_3_2; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_2_0() { return cTypeTypeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_2_0_1() { return cTypeTypeIDTerminalRuleCall_3_2_0_1; }
		
		//{New} 'new' type=[Type|QualifiedName] '(' ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{New}
		public Action getNewAction_4_0() { return cNewAction_4_0; }
		
		//'new'
		public Keyword getNewKeyword_4_1() { return cNewKeyword_4_1; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_4_2() { return cTypeAssignment_4_2; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_4_2_0() { return cTypeTypeCrossReference_4_2_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_4_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_4_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_3() { return cLeftParenthesisKeyword_4_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{Var} member=[Symbol] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//{Var}
		public Action getVarAction_5_0() { return cVarAction_5_0; }
		
		//member=[Symbol]
		public Assignment getMemberAssignment_5_1() { return cMemberAssignment_5_1; }
		
		//[Symbol]
		public CrossReference getMemberSymbolCrossReference_5_1_0() { return cMemberSymbolCrossReference_5_1_0; }
		
		//ID
		public RuleCall getMemberSymbolIDTerminalRuleCall_5_1_0_1() { return cMemberSymbolIDTerminalRuleCall_5_1_0_1; }
		
		//(methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//methodInvocation?='('
		public Assignment getMethodInvocationAssignment_5_2_0() { return cMethodInvocationAssignment_5_2_0; }
		
		//'('
		public Keyword getMethodInvocationLeftParenthesisKeyword_5_2_0_0() { return cMethodInvocationLeftParenthesisKeyword_5_2_0_0; }
		
		//(args+=Expr (',' args+=Expr)*)?
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }
		
		//args+=Expr
		public Assignment getArgsAssignment_5_2_1_0() { return cArgsAssignment_5_2_1_0; }
		
		//Expr
		public RuleCall getArgsExprParserRuleCall_5_2_1_0_0() { return cArgsExprParserRuleCall_5_2_1_0_0; }
		
		//(',' args+=Expr)*
		public Group getGroup_5_2_1_1() { return cGroup_5_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_5_2_1_1_0() { return cCommaKeyword_5_2_1_1_0; }
		
		//args+=Expr
		public Assignment getArgsAssignment_5_2_1_1_1() { return cArgsAssignment_5_2_1_1_1; }
		
		//Expr
		public RuleCall getArgsExprParserRuleCall_5_2_1_1_1_0() { return cArgsExprParserRuleCall_5_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2_2() { return cRightParenthesisKeyword_5_2_2; }
		
		//Block2
		public RuleCall getBlock2ParserRuleCall_6() { return cBlock2ParserRuleCall_6; }
		
		//'(' Expr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_7_1() { return cExprParserRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOnTrueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOnTrueExprParserRuleCall_4_0 = (RuleCall)cOnTrueAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOnFalseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOnFalseExprParserRuleCall_6_0 = (RuleCall)cOnFalseAssignment_6.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//If:
		//	'if' '(' condition=Expr ')'
		//	onTrue=Expr
		//	'else'
		//	onFalse=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expr ')' onTrue=Expr 'else' onFalse=Expr
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_2_0() { return cConditionExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//onTrue=Expr
		public Assignment getOnTrueAssignment_4() { return cOnTrueAssignment_4; }
		
		//Expr
		public RuleCall getOnTrueExprParserRuleCall_4_0() { return cOnTrueExprParserRuleCall_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }
		
		//onFalse=Expr
		public Assignment getOnFalseAssignment_6() { return cOnFalseAssignment_6; }
		
		//Expr
		public RuleCall getOnFalseExprParserRuleCall_6_0() { return cOnFalseExprParserRuleCall_6_0; }
	}
	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.metaborg.paplj.Paplj.Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBindingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_1_0 = (RuleCall)cBindingsAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//Let:
		//	'let' bindings+=Binding*
		//	'in' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' bindings+=Binding* 'in' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//bindings+=Binding*
		public Assignment getBindingsAssignment_1() { return cBindingsAssignment_1; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_1_0() { return cBindingsBindingParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ImportElements pImport;
	private final TypeElements pType;
	private final MemberElements pMember;
	private final SymbolElements pSymbol;
	private final FieldElements pField;
	private final MethodElements pMethod;
	private final ParamElements pParam;
	private final BindingElements pBinding;
	private final Block2Elements pBlock2;
	private final ExprElements pExpr;
	private final IfLetExprElements pIfLetExpr;
	private final AssignmentExprElements pAssignmentExpr;
	private final LogicalOrExprElements pLogicalOrExpr;
	private final LogicalAndExprElements pLogicalAndExpr;
	private final ComparativeExprElements pComparativeExpr;
	private final AdditiveExprElements pAdditiveExpr;
	private final MultiplicativeExprElements pMultiplicativeExpr;
	private final UnaryExprElements pUnaryExpr;
	private final MemberExprElements pMemberExpr;
	private final PrimaryExprElements pPrimaryExpr;
	private final IfElements pIf;
	private final LetElements pLet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PapljGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pImport = new ImportElements();
		this.pType = new TypeElements();
		this.pMember = new MemberElements();
		this.pSymbol = new SymbolElements();
		this.pField = new FieldElements();
		this.pMethod = new MethodElements();
		this.pParam = new ParamElements();
		this.pBinding = new BindingElements();
		this.pBlock2 = new Block2Elements();
		this.pExpr = new ExprElements();
		this.pIfLetExpr = new IfLetExprElements();
		this.pAssignmentExpr = new AssignmentExprElements();
		this.pLogicalOrExpr = new LogicalOrExprElements();
		this.pLogicalAndExpr = new LogicalAndExprElements();
		this.pComparativeExpr = new ComparativeExprElements();
		this.pAdditiveExpr = new AdditiveExprElements();
		this.pMultiplicativeExpr = new MultiplicativeExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pMemberExpr = new MemberExprElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pIf = new IfElements();
		this.pLet = new LetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.metaborg.paplj.Paplj".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////                                                Program and Classes                                                 //
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// The first rule is the start rule, and must be a non-terminal.
	//Program:
	//	('program' name=QualifiedName ';'?)?
	//	imports+=Import*
	//	classes+=Type* ('run'
	//	expr=Expr)?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';'?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Type:
	//	'class' name=ID ('extends' superType=[Type|QualifiedName])? '{'
	//	members+=Member*
	//	'}';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Member:
	//	Field | Method;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Symbol:
	//	Param | Binding | Member;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//Field:
	//	type=[Type|QualifiedName] name=ID ';'?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Method:
	//	type=[Type|QualifiedName] name=ID '(' (params+=Param (',' params+=Param)*)? ')'
	//	body=Block2;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Param:
	//	type=[Type|QualifiedName] name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Binding:
	//	type=[Type|QualifiedName] name=ID '=' value=Expr;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Block2:
	//	{Block2}
	//	'{' (exprs+=Expr (';' exprs+=Expr)*)? ';'?
	//	'}';
	public Block2Elements getBlock2Access() {
		return pBlock2;
	}
	
	public ParserRule getBlock2Rule() {
		return getBlock2Access().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////                                                     Expressions                                                    //
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// From lowest to highest precedence.
	//Expr:
	//	IfLetExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//IfLetExpr Expr:
	//	If | Let | AssignmentExpr;
	public IfLetExprElements getIfLetExprAccess() {
		return pIfLetExpr;
	}
	
	public ParserRule getIfLetExprRule() {
		return getIfLetExprAccess().getRule();
	}
	
	//// Non-associative.
	//AssignmentExpr Expr:
	//	LogicalOrExpr => ({Assignment.left=current} '=' value=Expr)?;
	public AssignmentExprElements getAssignmentExprAccess() {
		return pAssignmentExpr;
	}
	
	public ParserRule getAssignmentExprRule() {
		return getAssignmentExprAccess().getRule();
	}
	
	//// Left-associative.
	//LogicalOrExpr Expr:
	//	LogicalAndExpr (({Or.left=current} '||') right=LogicalAndExpr)*;
	public LogicalOrExprElements getLogicalOrExprAccess() {
		return pLogicalOrExpr;
	}
	
	public ParserRule getLogicalOrExprRule() {
		return getLogicalOrExprAccess().getRule();
	}
	
	//// Left-associative.
	//LogicalAndExpr Expr:
	//	ComparativeExpr (({And.left=current} '&&') right=ComparativeExpr)*;
	public LogicalAndExprElements getLogicalAndExprAccess() {
		return pLogicalAndExpr;
	}
	
	public ParserRule getLogicalAndExprRule() {
		return getLogicalAndExprAccess().getRule();
	}
	
	//// Non-associative.
	//ComparativeExpr Expr:
	//	AdditiveExpr (({Eq.left=current} '==' | {Neq.left=current} '!=' | {Lt.left=current} '<') right=AdditiveExpr)?;
	public ComparativeExprElements getComparativeExprAccess() {
		return pComparativeExpr;
	}
	
	public ParserRule getComparativeExprRule() {
		return getComparativeExprAccess().getRule();
	}
	
	//// Left-associative.
	//AdditiveExpr Expr:
	//	MultiplicativeExpr (({Add.left=current} '+' | {Sub.left=current} '-') right=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return pAdditiveExpr;
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}
	
	//// Left-associative.
	//MultiplicativeExpr Expr:
	//	UnaryExpr (({Mul.left=current} '*' | {Div.left=current} '/') right=UnaryExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return pMultiplicativeExpr;
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}
	
	//// Non-associative.
	//UnaryExpr Expr:
	//	MemberExpr (({Cast.left=current} 'as') type=[Type])? | {Not} '!' expr=UnaryExpr | {Min} '-' expr=UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//// Left-associative.
	//MemberExpr Expr:
	//	PrimaryExpr => ({MemberRef.left=current} '.' member=[Member] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)?
	//	')')?)*;
	public MemberExprElements getMemberExprAccess() {
		return pMemberExpr;
	}
	
	public ParserRule getMemberExprRule() {
		return getMemberExprAccess().getRule();
	}
	
	//PrimaryExpr Expr:
	//	{Num} value=INT | {Bool} (^true?='true' | 'false') | {This} 'this' | {Null} 'null' type=[Type]? | {New} 'new'
	//	type=[Type|QualifiedName] '(' ')' | {Var} member=[Symbol] (methodInvocation?='(' (args+=Expr (',' args+=Expr)*)? ')')?
	//	| Block2 |
	//	'(' Expr ')';
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//If:
	//	'if' '(' condition=Expr ')'
	//	onTrue=Expr
	//	'else'
	//	onFalse=Expr;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Let:
	//	'let' bindings+=Binding*
	//	'in' expr=Expr;
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
