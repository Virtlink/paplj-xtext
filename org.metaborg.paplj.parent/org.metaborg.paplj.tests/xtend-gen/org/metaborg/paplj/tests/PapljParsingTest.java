/**
 * generated by Xtext 2.10.0
 */
package org.metaborg.paplj.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.metaborg.paplj.PapljModelUtil;
import org.metaborg.paplj.paplj.Assignment;
import org.metaborg.paplj.paplj.Expr;
import org.metaborg.paplj.paplj.MemberRef;
import org.metaborg.paplj.paplj.Method;
import org.metaborg.paplj.paplj.Program;
import org.metaborg.paplj.paplj.This;
import org.metaborg.paplj.paplj.Type;
import org.metaborg.paplj.tests.PapljInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(PapljInjectorProvider.class)
@SuppressWarnings("all")
public class PapljParsingTest {
  @Inject
  @Extension
  private ParseHelper<Program> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void testMemberRefLeftAssociativity() {
    this.assertExprEquals("this.m().m()", "((this.m()).m())");
  }
  
  @Test
  public void testAssignmentRightAssociativity() {
    this.assertExprEquals("this.f = this.g = this", "(this.f = (this.g = this))");
  }
  
  private void assertExprEquals(final CharSequence actual, final CharSequence expected) {
    try {
      final String actualRepr = this.stringRepr(IterableExtensions.<Expr>last(IterableExtensions.<Method>head(PapljModelUtil.methods(IterableExtensions.<Type>head(this._parseHelper.parse(this.wrapInProgram(actual)).getClasses()))).getBody().getExprs()));
      final String expectedRepr = this.stringRepr(IterableExtensions.<Expr>last(IterableExtensions.<Method>head(PapljModelUtil.methods(IterableExtensions.<Type>head(this._parseHelper.parse(this.wrapInProgram(expected)).getClasses()))).getBody().getExprs()));
      Assert.assertNotNull(actualRepr);
      Assert.assertNotNull(expectedRepr);
      Assert.assertEquals(expectedRepr, actualRepr);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence wrapInProgram(final CharSequence expr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("A f");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("A g");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("A m() { ");
    _builder.append(expr, "\t");
    _builder.append(" }");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    return _builder;
  }
  
  private String stringRepr(final Expr e) {
    String _switchResult = null;
    boolean _matched = false;
    if (e instanceof MemberRef) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(");
      String _stringRepr = this.stringRepr(((MemberRef)e).getLeft());
      _builder.append(_stringRepr);
      _builder.append(".");
      String _name = ((MemberRef)e).getMember().getName();
      _builder.append(_name);
      {
        boolean _isMethodInvocation = ((MemberRef)e).isMethodInvocation();
        if (_isMethodInvocation) {
          _builder.append("(");
          final Function1<Expr, CharSequence> _function = (Expr it) -> {
            return this.stringRepr(it);
          };
          String _join = IterableExtensions.<Expr>join(((MemberRef)e).getArgs(), ", ", _function);
          _builder.append(_join);
          _builder.append(")");
        }
      }
      _builder.append(")");
      _switchResult = _builder.toString();
    }
    if (!_matched) {
      if (e instanceof Assignment) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _stringRepr = this.stringRepr(((Assignment)e).getLeft());
        _builder.append(_stringRepr);
        _builder.append(" = ");
        String _stringRepr_1 = this.stringRepr(((Assignment)e).getValue());
        _builder.append(_stringRepr_1);
        _builder.append(")");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (e instanceof This) {
        _matched=true;
        _switchResult = "this";
      }
    }
    return _switchResult;
  }
}
